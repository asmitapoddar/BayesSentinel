% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fitSpectra.R, R/predict.R, R/simulateSpectra.R
\docType{methods}
\name{initialize}
\alias{initialize}
\title{Initialize an instance of a fitSpectra S4 class.}
\usage{
\S4method{initialize}{fitSpectra}(.Object, m = list(0),
  modelname = "full", spectra = "diag", time = "diag",
  kerneltypeSpectra = "exponential", kerneltypeTime = "exponential",
  h = 10, s = 0.01, lambdaS = 0.3, lambdaT = 0.3,
  validation = FALSE, listLambdaS = seq(from = 0.1, to = 0.3, by =
  0.1), listLambdaT = seq(from = 0.1, to = 0.3, by = 0.1),
  model = "gaussian")

\S4method{initialize}{predictClass}(.Object, m = list(0),
  fittedCov = list(0), lambdaS = 0.3, lambdaT = 0.3,
  model = "gaussian", validation = FALSE, listLambdaS = seq(from =
  0.1, to = 10, by = 0.1), listLambdaT = seq(from = 0.1, to = 10, by =
  0.1))

\S4method{initialize}{simulateSpectra}(.Object, nbPixel = 10000,
  nbCluster = 15, nbSpectrum = 10, nbSampling = 33,
  sigma = rexp(nbSpectrum), times = c(0, 10, 20, 30, 40, 50, 60, 70,
  80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220,
  230, 240, 250, 260, 270, 280, 290, 300, 310, 321), width = 50,
  simulationType = "gaussian", modelname = "parsimonious",
  kernelSpectra = "gaussian", kernelTime = "gaussian")
}
\arguments{
\item{.Object}{object of class fitSpectra}

\item{m}{spectroscopic data}

\item{modelname}{name of model to be used for calculating the covariance matrix. Available models are
"full", "parsimonious". Default is "full".}

\item{spectra}{type of spectra. Available models are "diag", "unknown" and "kernel".
Default is "diag".}

\item{time}{type of time. Available models are "diag", "unknown" and "kernel".
Default is "diag".}

\item{kerneltypeSpectra}{kernel to be used for covariance matrix of spectra
Available kernels are "epanechnikov", "gaussian", "exponential", "uniform",
"quadratic", "circular", "triangular", "rational quadratic", "inverse multiquadratic".
Default is "exponential".}

\item{kerneltypeTime}{kernel to be used for covariance matrix of time
Available kernels are "epanechnikov", "gaussian", "exponential", "uniform",
"quadratic", "circular", "triangular", "rational quadratic", "inverse multiquadratic".
Default is "exponential".}

\item{h}{used for kernel calculation}

\item{s}{regularisation paramater for flip flop algorithm}

\item{lambdaS}{regularisation for spectra for flip flop algorithm}

\item{lambdaT}{regularisation for spectra for flip flop algorithm}

\item{validation}{to optimize lambda or not}

\item{listLambdaS}{list of lambdaS used in prediction in case validation is TRUE}

\item{listLambdaT}{list of lambdaT used in prediction in case validation is TRUE}

\item{model}{use in prediction in case of validation is TRUE}

\item{fittedCov}{fitted covariance matrix for the data}

\item{nbPixel}{number of pixels belonging to class k}

\item{nbCluster}{number of cluster}

\item{nbSpectrum}{number of spectra}

\item{nbSampling}{number of sampling}

\item{sigma}{a vector of size nbSpectrum giving the variance level of
the spectrum}

\item{times}{time intervals of the simulation}

\item{width}{the width of the kernel to use for "gaussian" simulation. Default is 50.}

\item{simulationType}{type of simulation. Available options are "gaussian" and
"tstudent". Default is "gaussian".}

\item{kernelSpectra}{type of kernel to be used to simulate  spectra. Available options
are "diag", ""epanechnikov", "gaussian", "exponential", "uniform", "quadratic"
, "circular", "triangular", "rational quadratic", "inverse multiquadratic".
Default is "gaussian".}

\item{kernelTime}{type of kernel to be used for simulating time. Available options are
"diag", ""epanechnikov", "gaussian", "exponential", "uniform", "quadratic",
"circular", "triangular", "rational quadratic", "inverse multiquadratic".
Default is "gaussian".}

\item{.Object}{object of class predictClass}

\item{m}{spectroscopic data}

\item{lambdaS}{parameter for regularisation of spectra}

\item{lambdaT}{parameter for regularisation of time}

\item{model}{type of model to be used for prediction of labels
Available models are "gaussian", "tstudent". Default is "gaussian".}

\item{validation}{logical to optimize the lambda.}

\item{predicted_labels}{predicted class labels}

\item{accuracy}{accracy of prediction}

\item{.Object}{object of class simulateSpectra}

\item{modelname}{type of model to be used to build covariance matrix.
Available options are "full" and "parsimonious". Default is "full".}

\item{nbSampling}{number of time intervals of the simulation}

\item{gamma}{degrees of freedom used for simulating "tstudent" distribution of data.
Default is 3.}

\item{labels}{class labels of the data}

\item{result}{return a list of simulated data}
}
\description{
Initialization method of the fitSpectra class.

Initialization method of the predictClass class.

Initialization method of the simulateSpectra class.
}
\examples{
m = new("simulateSpectra")
res = simulate(m)

}
\keyword{internal}
